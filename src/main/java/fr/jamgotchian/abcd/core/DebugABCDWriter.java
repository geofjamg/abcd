/*
 * Copyright (C) 2011 Geoffroy Jamgotchian <geoffroy.jamgotchian at gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package fr.jamgotchian.abcd.core;

import fr.jamgotchian.abcd.core.common.ABCDException;
import fr.jamgotchian.abcd.core.common.ABCDPreferences;
import fr.jamgotchian.abcd.core.ir.BasicBlock;
import fr.jamgotchian.abcd.core.ir.RangeGraphvizRenderer;
import fr.jamgotchian.abcd.core.ir.ControlFlowGraph;
import fr.jamgotchian.abcd.core.ir.EdgeGraphvizRenderer;
import fr.jamgotchian.abcd.core.ir.RPST;
import fr.jamgotchian.abcd.core.graph.GraphvizRenderer;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.Writer;
import java.util.logging.Level;

/**
 *
 * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at gmail.com>
 */
public class DebugABCDWriter extends DefaultABCDWriter {

    private static final EdgeGraphvizRenderer EDGE_GRAPHVIZ_RENDERER
            = new EdgeGraphvizRenderer();

    private static final EdgeGraphvizRenderer EDGE_GRAPHVIZ_RENDERER_FALSE
            = new EdgeGraphvizRenderer(false);

    private static final RangeGraphvizRenderer RANGE_GRAPHVIZ_RENDERER
            = new RangeGraphvizRenderer();

    private final File debugDir;

    public DebugABCDWriter(File outDir, ABCDPreferences preferences, File debugDir) {
        super(outDir, preferences);
        if (!debugDir.exists()) {
            throw new ABCDException(debugDir + " does not exist");
        }
        if (!debugDir.isDirectory()) {
            throw new ABCDException(debugDir + " is not a directory");
        }
        // delete .dot files generated by previous analysis
        File[] files = debugDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".dot");
            }
        });
        for (File f : files) {
            if(!f.delete()) {
                throw new ABCDException("Fail to delete file " + f);
            }
        }
        this.debugDir = debugDir;
    }

    @Override
    public void writeRawCFG(ControlFlowGraph cfg, GraphvizRenderer<BasicBlock> bytecodeRenderer) {
        assert cfg != null;

        String baseName = debugDir.getPath() + File.separator + cfg.getName();

        try {
            Writer writer = new FileWriter(baseName + "_RAWCFG.dot");
            try {
                cfg.export(writer);
            } finally {
                writer.close();
            }

            writer = new FileWriter(baseName + "_BC.dot");
            try {
                cfg.export(writer, bytecodeRenderer, EDGE_GRAPHVIZ_RENDERER);
            } finally {
                writer.close();
            }
        } catch (IOException e) {
            LOGGER.log(Level.SEVERE, e.toString(), e);
        }
    }

    @Override
    public void writeCFG(ControlFlowGraph cfg, boolean failure) {
        assert cfg != null;

        String baseName = debugDir.getPath() + File.separator + cfg.getName();

        try {
            Writer writer = new FileWriter(baseName + "_DFST.dot");
            try {
                cfg.getDFST().export(writer, "DFST", RANGE_GRAPHVIZ_RENDERER,
                                     EDGE_GRAPHVIZ_RENDERER);
            } finally {
                writer.close();
            }

            writer = new FileWriter(baseName + "_CFG.dot");
            try {
                cfg.export(writer);
            } finally {
                writer.close();
            }

            writer = new FileWriter(baseName + "_DT.dot");
            try {
                cfg.getDominatorInfo().getDominatorsTree()
                        .export(writer, "DT", RANGE_GRAPHVIZ_RENDERER,
                                EDGE_GRAPHVIZ_RENDERER_FALSE);
            } finally {
                writer.close();
            }

            if (cfg.getPostDominatorInfo() != null) {
                writer = new FileWriter(baseName + "_PDT.dot");
                try {
                    cfg.getPostDominatorInfo().getPostDominatorsTree()
                            .export(writer, "PDT",
                                    RANGE_GRAPHVIZ_RENDERER,
                                    EDGE_GRAPHVIZ_RENDERER_FALSE);
                } finally {
                    writer.close();
                }
            }

            writer = new FileWriter(baseName + "_INST.dot");
            try {
                cfg.exportInst(writer);
            } finally {
                writer.close();
            }
        } catch (IOException e) {
            LOGGER.log(Level.SEVERE, e.toString(), e);
        }
    }

    @Override
    public void writeRPST(RPST rpst, int level) {
        assert rpst != null;

        String baseName = debugDir.getPath() + File.separator + rpst.getCfg().getName();

        try {
            Writer writer = new FileWriter(baseName + "_RPST_" + level + ".dot");
            try {
                rpst.export(writer);
            } finally {
                writer.close();
            }
        } catch (IOException e) {
            LOGGER.log(Level.SEVERE, e.toString(), e);
        }
    }
}
