/*
 * Copyright (C) 2011 Geoffroy Jamgotchian <geoffroy.jamgotchian at gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package fr.jamgotchian.abcd.core;

import fr.jamgotchian.abcd.core.common.ABCDException;
import fr.jamgotchian.abcd.core.controlflow.BasicBlockRangeAttributeFactory;
import fr.jamgotchian.abcd.core.controlflow.ControlFlowGraph;
import fr.jamgotchian.abcd.core.controlflow.EdgeAttributeFactory;
import fr.jamgotchian.abcd.core.controlflow.RPST;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Writer;
import java.util.logging.Level;

/**
 *
 * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at gmail.com>
 */
public class DebugOutputHandler extends DefaultOutputHandler {

    private final File outputDir;

    public DebugOutputHandler(boolean debug, OutputStream os, File outputDir) {
        super(debug, os);
        if (!outputDir.exists()) {
            throw new ABCDException(outputDir + " does not exist");
        }
        if (!outputDir.isDirectory()) {
            throw new ABCDException(outputDir + " is not a directory");
        }
        // delete .dot files generated by previous analysis
        File[] files = outputDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.endsWith(".dot");
            }
        });
        for (File f : files) {
            f.delete();
        }
        this.outputDir = outputDir;
    }

    @Override
    public void controlFlowGraphBuilt(ControlFlowGraph graph) {

        String baseName = outputDir.getPath() + "/" + graph.getName();

        try {
            Writer writer = new FileWriter(baseName + "_DFST.dot");
            try {
                graph.getDFST()
                        .export(writer, "DFST",
                                new BasicBlockRangeAttributeFactory(),
                                new EdgeAttributeFactory());
            } finally {
                writer.close();
            }

            writer = new FileWriter(baseName + "_CFG.dot");
            try {
                graph.export(writer);
            } finally {
                writer.close();
            }

            writer = new FileWriter(baseName + "_BC.dot");
            try {
                graph.exportBytecode(writer);
            } finally {
                writer.close();
            }

            writer = new FileWriter(baseName + "_DT.dot");
            try {
                graph.getDominatorInfo().getDominatorsTree()
                        .export(writer, "DT",
                                new BasicBlockRangeAttributeFactory(),
                                new EdgeAttributeFactory(false));
            } finally {
                writer.close();
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, e.toString(), e);
        }
    }

    @Override
    public void treeAddressCodeBuilt(ControlFlowGraph graph) {

        String baseName = outputDir.getPath() + "/" + graph.getName();

        try {
            Writer writer = new FileWriter(baseName + "_PDT.dot");
            try {
                graph.getPostDominatorInfo().getPostDominatorsTree()
                        .export(writer, "PDT",
                                new BasicBlockRangeAttributeFactory(),
                                new EdgeAttributeFactory(false));
            } finally {
                writer.close();
            }

            writer = new FileWriter(baseName + "_TAC.dot");
            try {
                graph.exportTAC(writer);
            } finally {
                writer.close();
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, e.toString(), e);
        }
    }

    @Override
    public void rpstBuilt(RPST rpst) {

        String baseName = outputDir.getPath() + "/" + rpst.getCFG().getName();

        try {
            Writer writer = new FileWriter(baseName + "_RPST.dot");
            try {
                rpst.export(writer);
            } finally {
                writer.close();
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, e.toString(), e);
        }
    }
}
